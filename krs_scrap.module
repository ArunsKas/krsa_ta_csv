<?php

global $url_base;
$url_base = 'https://www.kretinga.lt';

module_load_include('inc', 'krs_scrap', 'krs_scrap.core');

function krs_scrap_menu() {
  $items = array();
  $items['to_csv'] = array(
    'title' => 'Web pages to CSV',
    'page callback' => 'krs_to_csv',
    'access arguments' => array(true),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['to_csv/delete/%'] = array(
    'page callback' => '_krs_delete',
    'access arguments' => array(true),
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['to_csv/scrap/update_t2'] = array(
    'page callback' => '_krs_scrap_again_t2',
    'access arguments' => array(true),
    'type' => MENU_CALLBACK,
  );
  $items['to_csv/parse_last_csv/%'] = array(
    'page callback' => '_parse_all_csv_info',
    'page arguments' => array(2),
    'access arguments' => array(true),
    'type' => MENU_CALLBACK,
  );
  $items['to_csv/scrap/update_a1'] = array(
    'page callback' => '_krs_scrap_again_a1',
    'access arguments' => array(true),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function krs_to_csv() {
  
  $scrap_t2_link = l(t('Scrap T2 again'), 'to_csv/scrap/update_t2');
  $scrap_a1_link = l(t('Scrap A1 again'), 'to_csv/scrap/update_a1');
  $parse_t2_link = l(t('Parse last scraped T2 csv'), 'to_csv/parse_last_csv/t2');
  $parse_a1_link = l(t('Parse last scraped A1 csv'), 'to_csv/parse_last_csv/a1');
  
  return $scrap_t2_link . '<br />' 
      . $parse_t2_link . '<br />'
      . $scrap_a1_link . '<br />'
      . $parse_a1_link . '<br />'
      . ' ' 
      . _csv_files_table('t2');
}

/**
 * scrap pages and write T2 register data to csv
 * 
 */
function _krs_scrap_again_t2() {
  global $url_base;
  $referer = referer_path();
  $url_of_all_docs = 'https://www.kretinga.lt/node/251';
  $html_obj = file_get_html($url_of_all_docs);
  $node_html_obj = $html_obj->getElementById("node-251");

  $links = array();
  $all_doc_info = array();
  foreach ($node_html_obj->find('li.leaf a') as $link) {
    $url = $url_base . $link->href;
    $links[] = $url;
    $all_doc_info[] = _get_doc_rows_content($url);
  }

  // Release resources to avoid memory leak in some versions.
  $html_obj->clear();
  unset($html_obj);

  $parsed_data = _parse_all_doc_info($all_doc_info);
  _write_to_csv($parsed_data, 't2-scrap-output.csv');
  drupal_goto($referer);
}

/**
 * scrap pages and write T2 register data to csv
 * 
 */
function _krs_scrap_again_a1() {
  global $url_base;
  $referer = referer_path();
  $url_of_all_docs = 'https://www.kretinga.lt/node/587';
  $html_obj = file_get_html($url_of_all_docs);
  $node_html_obj = $html_obj->getElementById("node-587");

  $links = array();
  $all_doc_info = array();
  foreach ($node_html_obj->find('li.leaf a') as $link) {
    $url = $url_base . $link->href;
    $links[] = $url;
    $all_doc_info[] = _get_doc_rows_content($url);
  }

  // Release resources to avoid memory leak in some versions.
  $html_obj->clear();
  unset($html_obj);

  $parsed_data = _parse_all_doc_info($all_doc_info);
  _write_to_csv($parsed_data, 'a1-scrap-output.csv');
  drupal_goto($referer);
}


function _krs_delete($fid) {
  $referer = referer_path();
  $file = file_load($fid);
  file_delete($file);
  drupal_goto($referer);
}

function _parse_all_csv_info($register) {
  $referer = referer_path();
  $public_path = variable_get('file_public_path', conf_path());
  $path = $public_path . '/csv';
  //$mask = '/^t2-scrap.*.csv$/';
  $mask = "/^{$register}-scrap.*.csv$/";
  $csv_files = file_scan_directory($path, $mask);  
    
  $files_objects_arr = array();
  foreach ($csv_files as $file) {
    $uri = 'public://' . ltrim($file->uri, $public_path);
    if ($file_obj = _file_load_by_uri($uri)) {
      $files_objects_arr[] = $file_obj;
    }
  }

  // sort by last update time
  uasort($files_objects_arr, '__sort_callback');
  
  $newest_csv_uri = array_values($files_objects_arr)[0]->uri;
 
  // load csv file and parse data to one line per doc with attachments
  $csv_uri = $newest_csv_uri;
  $handle = fopen($csv_uri, 'r');
  $row = fgetcsv($handle);
  $columns = array();
  foreach ($row as $i => $header) {
    $columns[$i] = strtolower(trim($header));
  }
  $csv_rows = array();
  while ($row = fgetcsv($handle)) {
    $csv_row = array();
    foreach ($row as $i => $field) {
      $csv_row[$columns[$i]] = $field;
    }
    $csv_rows[] = $csv_row;
  }

  $result = array();
  $attached_doc = array();
  if ($register == 't2') {
    $title_substring = 'tarybos sprendimas';
  } else if ($register == 'a1'){
    $title_substring = 'administracijos direktoriaus Ä¯sakymas';
  } else {
    $title_substring = '';
  }
  foreach($csv_rows as $key => $row) {
    $title = $row['title'];
    if (_similar_to_main_doc($title, $title_substring)) {
      // if new main doc started then first write previous doc with attach to 
      // array
      if (isset($main_doc)) {
        _parse_all_doc_info_write($main_doc, $attached_doc, $register, $result);
      }
      $main_doc = $row;
      $attached_doc = array();
    } else {
      // clear attachment title text
      $attached_doc[] = array(
        'title' => _clear_text_string($row['title']),
        'link' => $row['link']
          );
    }    
  }
  _parse_all_doc_info_write($main_doc, $attached_doc, $register, $result);
  _write_parsed_to_csv($result, $register);
  _write_parsed_to_csv($result, $register, 'attach');
  drupal_goto($referer);
}

function _parse_all_doc_info_write($main_doc, $attached_doc, $register, &$result) {
  $doc_no = _get_doc_no($main_doc['title'], $register);
  $doc_y = _get_doc_year($main_doc['title']);
  $doc_d = _get_doc_day($main_doc['title']);
  $doc_m = _get_doc_month($main_doc['title'], $doc_y, $doc_d);
  $doc_title = _get_doc_title($main_doc['title'], $doc_no);

  $date_str = $doc_y . '-' . $doc_m . '-' . $doc_d;
  $timestamp = strtotime($date_str);
  // write to array only valid date format 
  $date_valid = $timestamp ? $date_str : '';

  $result[$date_valid . ' ' . $doc_no] = array(
    'no' => $doc_no,
    'docdate' => $date_valid,
    'title' => $doc_title,
    'main' => $main_doc,
    'attach' => $attached_doc);
}
