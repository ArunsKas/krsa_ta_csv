<?php

global $url_base;
$url_base = 'https://www.kretinga.lt';

function krsa_ta_csv_menu() {
  $items = array();
  $items['ta_csv'] = array(
    'title' => 'TA to CSV',
    'page callback' => 'krsa_ta_csv',
    'access arguments' => array(true),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function krsa_ta_csv() {
  
  $path = variable_get('file_public_path', conf_path() . '/files');
  $mask = '/ta-1-output.csv/';
  $csv_files = file_scan_directory($path, $mask);
  
  if (!$csv_files) {
    // if csv file not found then generate new csv file
    global $url_base;
    $url_of_all_tarspr = 'https://www.kretinga.lt/node/251';
    $html_obj = file_get_html($url_of_all_tarspr);
    $node_html_obj = $html_obj->getElementById("node-251");

    $links = array();
    foreach ($node_html_obj->find('li.leaf a') as $link) {
      $url = $url_base . $link->href;
      $links[] = $url;
      $all_ta_info[] = _get_ta_rows_content($url);
    }
    
    // Release resources to avoid memory leak in some versions.
    $html_obj->clear();
    unset($html_obj);

    $parsed_data = _parse_all_ta_info($all_ta_info);
    //kpr($parsed_data);
    _write_to_csv($parsed_data); 
  } else {
    // load csv file and parse data to one line per doc with attachments
    $csv_uri = array_shift($csv_files)->uri;
    $handle = fopen($csv_uri, 'r');
    $row = fgetcsv($handle);
    $columns = array();
    foreach ($row as $i => $header) {
      $columns[$i] = strtolower(trim($header));
    }
    $csv_rows = array();
    while ($row = fgetcsv($handle)) {
      $csv_row = array();
      foreach ($row as $i => $field) {
        $csv_row[$columns[$i]] = $field;
      }
      $csv_rows[] = $csv_row;
    }
    
    _parse_all_ta_info2($csv_rows);
    
  }

  return 'TEST';
}

function _parse_all_ta_info2($rows) {
  $result = array();
  $attached_doc = array();
  foreach($rows as $key => $row) {
    $title = $row['title'];
    if (_similar_to_main_doc($title)) {
      // if new main doc started then first write previous doc with attach to 
      // array
      if (isset($main_doc)) {
        _parse_all_ta_info2_write($main_doc, $attached_doc, $result);
      }
      $main_doc = $row;
      $attached_doc = array();
    } else {
      $attached_doc[] = $row;
    }    
  }
  _parse_all_ta_info2_write($main_doc, $attached_doc, $result);
  kpr($result);
}

function _parse_all_ta_info2_write($main_doc, $attached_doc, &$result) {
  $doc_no = _get_doc_no($main_doc['title']);
  $doc_y = _get_doc_year($main_doc['title']);
  $doc_d = _get_doc_day($main_doc['title']);
  $doc_m = _get_doc_month($main_doc['title'], $doc_y, $doc_d);
  $doc_title = _get_doc_title($main_doc['title'], $doc_no);

  $date_str = $doc_y . '-' . $doc_m . '-' . $doc_d;
  $timestamp = strtotime($date_str);
  // write to array only valid date format 
  $date_valid = $timestamp ? $date_str : '';

  $result[$date_valid . ' ' . $doc_no] = array(
    'no' => $doc_no,
    'title' => $doc_title,
    'main' => $main_doc,
    'attach' => $attached_doc);
}

function _get_doc_title($txt, $doc_no) {
  $doc_no_len = strlen($doc_no);
  $doc_no_pos = strpos($txt, $doc_no);
  $txt_len = strlen($txt);
  // cut string from start up to doc no end
  $title = substr($txt, $doc_no_pos + $doc_no_len, $txt_len);
  // remove spaces from start and end
  $title = trim($title);
  // remove dot from start and end '.'
  $title = trim($title, '.');
  // decode special chars like '&quot;'
  $title = htmlspecialchars_decode($title);
  
  $title = decode_entities($title);
  // remove start german quote
  $title = trim($title, '„');
  // remove end german quote
  $title = trim($title, '“');  
  // remove double quote '"' from start and end
  $title = trim($title, '"');
  
  //$title = check_plain($title);
  // fix number of open close quotes  
  $title = _fix_quotes($title);
  // replace start german quote code to symbol
  //$title = str_replace('&bdquo;', '„', $title);
  
  // replace end german quote code to symbol
  //$title = str_replace('&ldquo;', '“', $title);
  
  
  return $title;
}

/**
 * fix number of open close quotes  
 * @param type $text
 * @return string
 */
function _fix_quotes($text) {
  $q1 = '"';
  $q2 = '„';
  $q3 = '“';
  $pos_q1 = strpos($text, $q1);
  if ($pos_q1) {
    // convert all quotes to q1 type
    $text = str_replace($q2, $q1, $text);
    $text = str_replace($q3, $q1, $text);
    $count_q1 = substr_count($text, $q1);
    if ($count_q1 % 2 <> 0) {
      // append q1 to end of string
      $text = $text . $q1;
    } 
  } else {
    $count_q2 = substr_count($text, $q2);
    $count_q3 = substr_count($text, $q3);
    if ($count_q2 - $count_q3 == 1) {
      // append missing q3
      $text = $text . $q3;
    }
  }
  return $text;
}

function _get_doc_month($txt, $y, $d) {
  // cut first year four digits from text 
  $txt_without_y = substr($txt, strpos($txt, $y) + 4, strlen($txt));
  // cut text after two day digits
  $day_pos = strpos($txt_without_y, ltrim($d, '0'));
  $txt1 = substr($txt_without_y, 0, $day_pos);
  $txt2 = trim(ltrim(trim(str_replace($y, '', $txt1)), 'm.'));

  switch ($txt2) {
    case 'sausio':
      $result = '01';
      break;
    case 'vasario':
      $result = '02';
      break;
    case 'kovo':
      $result = '03';
      break;
    case 'balandžio':
      $result = '04';
      break;
    case 'gegužės':
      $result = '05';
      break;
    case 'birželio':
      $result = '06';
      break;
    case 'liepos':
      $result = '07';
      break;
    case 'rugpjūčio':
      $result = '08';
      break;
    case 'rugsėjo':
      $result = '09';
      break;
    case 'spalio':
      $result = '10';
      break;
    case 'lapkričio':
      $result = '11';
      break;
    case 'gruodžio':
      $result = '12';
      break;
    default:
      $result = '';
      break;
  }
  return $result;
}

function _get_doc_day($txt) {
  $pattern = '/(\s|[a-z]*)\b([0-9]{1,2})\b/';
  preg_match_all($pattern, $txt, $matches);
  return str_pad(trim($matches[0][0]), 2, "0", STR_PAD_LEFT);
}

/**
 * function to return first match of dddd (four digit year)
 * @param type $txt
 * @return type
 */
function _get_doc_year($txt) {
  $pattern = '/([0-9]{4})/';
  preg_match_all($pattern, $txt, $matches);
  return $matches[0][0];
}

/**
 * function to return first match of T2-ddd
 * @param type $txt
 * @return type
 */
function _get_doc_no($txt) {
  $pattern = '/\T2-([0-9]*)/';
  preg_match_all($pattern, $txt, $matches);
  return $matches[0][0];
}

function _similar_to_main_doc($title) {
  $needle = 'tarybos sprendimas';
  $title_low = strtolower($title);
  $pos = strpos($title_low, $needle);
  if (($pos > 10) && ($pos < 30)) {
    return true;
  } 
  return false;
}

function _write_to_csv($data) {
  $path = 'public://csv/';
  $filename = 'ta-1-output.csv';
  // Ensure the directory
  if(!file_prepare_directory($path, FILE_CREATE_DIRECTORY)){
    drupal_set_message( t('Unable to create directory in file system. Check permissions and try again.'), 'error' );
    return;
  }
  // Ensure the file
  $file = file_save_data('', $path . $filename);
  if(!$file){
    drupal_set_message( t('Unable to write to file system. Check permissions and try again.'), 'error' );
    return;
  }
  // Stream data - This is a simplified example. Better to do it in a batch if you have a high volume of data
  $fh = fopen($file->uri, 'w');
  if(!$fh){
    drupal_set_message( t('Unable open file for writing. Check permissions and try again.'), 'error' );
    return;
  }
  
  fputcsv($fh, array(
    'Title',
    'Link',
  ));
  
  foreach ($data as $month_group_items) {
    foreach ($month_group_items as $item) {
      fputcsv($fh, array(
      $item['title'],
      $item['href'],
    ));
    }
  }
  fclose($fh);
  
  // Notify the filesystem of the size change
  $file->filesize = filesize($file->uri);
  file_save($file);
  // Tell the user where we stuck it
  drupal_set_message( t('Export complete. <a href="!url">!filename</a>.', array(
    '!url' => file_create_url($file->uri),
    '!filename' => $filename,
  )));
}

/**
 * Function parse raw array data from crawler to strict structure:
 * - new row per month / crawled page
 * - each sub row can be main document or extra document (attachment to main doc)
 * - each document can have link to file or link can be empty
 * - each document must have title
 * @param array $all_ta_info - multidimensional array of scrapped tables rows
 * @return array - multidimensional parsed structured array
 */
function _parse_all_ta_info($all_ta_info) {

  $parsed_data = array();
  foreach($all_ta_info as $key => $ta_per_month) {
    $count_a = count($ta_per_month['a']);
    $count_p = count($ta_per_month['p']);
    
    $ta_per_month_result = $ta_per_month['a'];
    if ($count_p > $count_a) {
      // if some records don't have links to file
      
      $tmp_a = array();
      foreach ($ta_per_month['a'] as $item_a) {
        $tmp_a[] = $item_a['title'];
      }
      
      // create array with records without links
      $arr1 = $ta_per_month['p'];
      $arr2 = $tmp_a;
      $without_links_arr = _array_diff_by_str_val($arr1, $arr2);
      
      // insert records without links in array whose records are only with links
      foreach ($without_links_arr as $index => $value) {
        array_splice($ta_per_month_result, $index, 0, array($value));
      }
    } else {
      // all records have links - nothing to do.      
    }
    $parsed_data[$key] = $ta_per_month_result;
  }
  return $parsed_data;
}

// create array with records without links
// similar to array_diff()
function _array_diff_by_str_val($arr1, $arr2) {
  $pos_shift = 0;
  $array_diff = array();
  foreach ($arr1 as $pos => $item) {
    if (isset($arr2[$pos + $pos_shift])) {
      if (!($item == $arr2[$pos + $pos_shift])) {
        $array_diff[$pos] = array('title' => $item, 'href' => '');
        $pos_shift--;
      }
    }
    else {
      $array_diff[$pos] = array('title' => $item, 'href' => '');
    }
  }
  return $array_diff;
}

// get documents list from one page (T2 case one page = one months)
// table rows are splitted by <a> and <p> tags and recorded to array fiels
function _get_ta_rows_content($url) {
  $html_obj_ta_page = file_get_html($url);
  $node_html_obj_ta = $html_obj_ta_page->getElementById("main-inner");
  
  $table_rows_a = $node_html_obj_ta->find('table.spr tr.tablerow a');
  
  global $url_base;
  $rows = array();
  foreach($table_rows_a as $row) {
    $title = trim(str_replace('&nbsp;', ' ', $row->plaintext));
    $link = $row->href;
    if (strlen($link) > 0) {
      $link = $url_base . $link;
    } 
    $rows[] = array('title' => $title, 'href' => $link);
  }
  
  $table_rows_p = $node_html_obj_ta->find('table.spr tr.tablerow p');
  
  $rows_p = array();
  foreach($table_rows_p as $row) {
    $title = trim(str_replace('&nbsp;', ' ', $row->plaintext)); //->find('tr');
    $rows_p[] = $title;
  }
  
  $html_obj_ta_page->clear();
  unset($html_obj_ta_page);
  
  return array('a' => $rows, 'p' => $rows_p);
}